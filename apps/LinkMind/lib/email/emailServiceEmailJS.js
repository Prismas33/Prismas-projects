// Servi√ßo de email usando EmailJS - mais simples para voc√™ que j√° tem conta
import emailjs from '@emailjs/browser';

// Configura√ß√µes do EmailJS - usando seus dados reais
const EMAILJS_SERVICE_ID = process.env.NEXT_PUBLIC_EMAILJS_SERVICE_ID || 'service_ol8niqo'; // Gmail service
const EMAILJS_TEMPLATE_ID = process.env.NEXT_PUBLIC_EMAILJS_TEMPLATE_ID || 'template_i0h927g'; // Seu template
const EMAILJS_PUBLIC_KEY = process.env.NEXT_PUBLIC_EMAILJS_PUBLIC_KEY || 'BABNdz0y37DwfGJ9P'; // Sua public key

export async function enviarEmailBoasVindasEmailJS(subscriptionData, userData) {
  try {
    const planName = subscriptionData.plan_id === process.env.PAYPAL_MONTHLY_PLAN_ID ? 'Mensal' : 'Anual';
    const planPrice = subscriptionData.plan_id === process.env.PAYPAL_MONTHLY_PLAN_ID ? '‚Ç¨5/m√™s' : '‚Ç¨50/ano';
    
    // Template params simples para funcionar com qualquer template EmailJS
    const templateParams = {
      from_name: 'LinkMind',
      to_name: userData.nome || userData.displayName || 'Cliente',
      subject: 'üöÄ Bem-vindo ao LinkMind Premium!',
      message: `Parab√©ns! A sua subscri√ß√£o do LinkMind Premium foi ativada com sucesso.

üìã Detalhes da Subscri√ß√£o:
‚Ä¢ Plano: ${planName} (${planPrice})
‚Ä¢ ID: ${subscriptionData.id}
‚Ä¢ Status: Ativo ‚úÖ
‚Ä¢ Data: ${new Date().toLocaleDateString('pt-PT')}

üéØ Acesso Premium Ativado:
‚úÖ Upload ilimitado de arquivos
‚úÖ Organiza√ß√£o avan√ßada de ideias  
‚úÖ Acesso completo ao sistema
‚úÖ Suporte priorit√°rio

üöÄ Aceda agora: ${process.env.NEXT_PUBLIC_APP_URL || 'https://linkmind.app'}/dashboard

Obrigado por escolher LinkMind!
A sua mente digital est√° pronta para usar.

---
LinkMind - A sua mente digital, sempre acess√≠vel`,
      
      // Campos extras para templates avan√ßados (opcionais)
      user_email: userData.email || userData.displayName + '@gmail.com',
      subscription_id: subscriptionData.id,
      plan_type: planName,
      dashboard_url: `${process.env.NEXT_PUBLIC_APP_URL || 'https://linkmind.app'}/dashboard`
    };

    console.log('üìß Enviando email via EmailJS...', {
      service: EMAILJS_SERVICE_ID,
      template: EMAILJS_TEMPLATE_ID,
      to: userData.nome || userData.displayName
    });

    const response = await emailjs.send(
      EMAILJS_SERVICE_ID,
      EMAILJS_TEMPLATE_ID,
      templateParams,
      EMAILJS_PUBLIC_KEY
    );

    console.log('‚úÖ Email enviado com sucesso:', response.status, response.text);
    return { success: true, response };
    
  } catch (error) {
    console.error('‚ùå Erro ao enviar email via EmailJS:', error);
    return { success: false, error };
  }
}

export async function enviarEmailFaturaEmailJS(subscriptionData, userData, transactionData) {
  try {
    const planName = subscriptionData.plan_id === process.env.PAYPAL_MONTHLY_PLAN_ID ? 'Mensal' : 'Anual';
    const planPrice = subscriptionData.plan_id === process.env.PAYPAL_MONTHLY_PLAN_ID ? '‚Ç¨5.00' : '‚Ç¨50.00';
    const invoiceNumber = `LM-${Date.now()}`;
    
    const templateParams = {
      from_name: 'LinkMind - Fatura√ß√£o',
      to_name: userData.nome || userData.displayName || 'Cliente',
      subject: `üßæ Fatura LinkMind #${invoiceNumber}`,
      message: `FATURA LINKMIND
Fatura #: ${invoiceNumber}
Data: ${new Date().toLocaleDateString('pt-PT')}

CLIENTE:
${userData.nome || userData.displayName}
${userData.email || 'Email n√£o dispon√≠vel'}

SERVI√áO:
LinkMind Premium - Plano ${planName}
Per√≠odo: ${planName === 'Mensal' ? 'Mensal' : 'Anual'}
Valor: ${planPrice}

PAGAMENTO:
M√©todo: PayPal ‚úÖ
Transa√ß√£o: ${subscriptionData.id}
Status: Pago

TOTAL: ${planPrice}

Obrigado por escolher LinkMind!
Esta fatura serve como comprovativo de pagamento.

---
LinkMind - A sua mente digital, sempre acess√≠vel`,

      // Campos extras para templates avan√ßados
      user_email: userData.email || userData.displayName + '@gmail.com',
      invoice_number: invoiceNumber,
      amount: planPrice,
      transaction_id: subscriptionData.id
    };

    console.log('üßæ Enviando fatura via EmailJS...', {
      service: EMAILJS_SERVICE_ID,
      invoice: invoiceNumber,
      to: userData.nome || userData.displayName
    });

    const response = await emailjs.send(
      EMAILJS_SERVICE_ID,
      EMAILJS_TEMPLATE_ID,
      templateParams,
      EMAILJS_PUBLIC_KEY
    );

    console.log('‚úÖ Fatura enviada com sucesso:', response.status, response.text);
    return { success: true, response };
    
  } catch (error) {
    console.error('‚ùå Erro ao enviar fatura via EmailJS:', error);
    return { success: false, error };
  }
}

// Fun√ß√£o para validar configura√ß√£o do EmailJS
export function validarConfiguracaoEmailJS() {
  if (!EMAILJS_SERVICE_ID || !EMAILJS_TEMPLATE_ID || !EMAILJS_PUBLIC_KEY) {
    console.warn('‚ö†Ô∏è EmailJS n√£o est√° completamente configurado. Verifique as vari√°veis de ambiente.');
    return false;
  }
  return true;
}
